from typing import Dict, Any
import pandas as pd
import numpy as np

__all__ = ["analisar_autocorrelacao"]


def analisar_autocorrelacao(
    panel_acf: pd.DataFrame,
    feature_name: str,
    *,
    threshold_baixo: float = 0.1,
    threshold_moderado: float = 0.3,
    threshold_alto: float = 0.6,
    verbose: bool = True
) -> Dict[str, Any]:
    """
    Analisa resultados de autocorrela√ß√£o agregada (panel_acf) para uma feature,
    determina o lag de maior influ√™ncia e sugere uma recomenda√ß√£o.

    Par√¢metros
    ----------
    panel_acf : pd.DataFrame
        DataFrame com as colunas ['lag', 'acf', 'n_contracts'] (retorno de compute_panel_acf).
    feature_name : str
        Nome da feature que est√° sendo analisada (aparece nos logs/sa√≠da).
    threshold_baixo : float, opcional (default=0.1)
        At√© esse valor de |ACF| considera-se que n√£o h√° sinal relevante (n√≠vel ‚Äúru√≠do‚Äù).
    threshold_moderado : float, opcional (default=0.3)
        Acima de threshold_baixo e abaixo de threshold_moderado considera-se n√≠vel ‚Äúleve‚Äù.
    threshold_alto : float, opcional (default=0.6)
        Acima de threshold_moderado e abaixo de threshold_alto considera-se n√≠vel ‚Äúmoderado‚Äù.
        Acima de threshold_alto => n√≠vel ‚Äúalto‚Äù.
    verbose : bool, opcional (default=True)
        Se True, imprime mensagem no console com n√≠vel e recomenda√ß√£o.

    Retorna
    -------
    dict
        {
            "feature": feature_name,
            "acf_max": float,         # valor absoluto m√°ximo de acf
            "acf_lag_max": int,       # lag correspondente a acf_max
            "nivel": str,             # 'ruido' | 'leve' | 'moderada' | 'alta'
            "recomendacao": str       # texto recomendando a√ß√£o
        }
    """

    if panel_acf.empty or "acf" not in panel_acf.columns or "lag" not in panel_acf.columns:
        raise ValueError(
            "panel_acf deve conter as colunas ['lag', 'acf'] e n√£o pode estar vazio."
        )

    # Trabalhar com valores absolutos para determinar intensidade
    acf_abs = panel_acf["acf"].abs()
    idx_max = int(acf_abs.idxmax())
    acf_max = float(acf_abs.iloc[idx_max])
    lag_max = int(panel_acf.loc[idx_max, "lag"])

    # Determinar n√≠vel e recomenda√ß√£o
    if acf_max < threshold_baixo:
        nivel = "ruido"
        recomendacao = "Sem sinal relevante de autocorrela√ß√£o. N√£o √© necess√°rio incluir lags."
    elif acf_max < threshold_moderado:
        nivel = "leve"
        recomendacao = (
            f"ACF leve em lag {lag_max} (‚âà {acf_max:.2f}). "
            "Opcionalmente, pode-se incluir esse lag como nova feature."
        )
    elif acf_max < threshold_alto:
        nivel = "moderada"
        recomendacao = (
            f"ACF moderada em lag {lag_max} (‚âà {acf_max:.2f}). "
            "Recomenda-se incluir esse lag como feature ou usar m√©dia m√≥vel, "
            "controlando multicolinearidade depois."
        )
    else:
        nivel = "alta"
        recomendacao = (
            f"ACF alta em lag {lag_max} (‚âà {acf_max:.2f}). "
            "Sugere-se criar m√∫ltiplos lags (e.g. lag_{lag_max}, lag_{lag_max*2}) ou "
            "usar modelo de s√©ries temporais para capturar depend√™ncia."
        )

    if verbose:
        print(f"\nüîé An√°lise de Autocorrela√ß√£o ‚Äì {feature_name}")
        print(f"   ‚Ä¢ maior |ACF| = {acf_max:.2f} no lag {lag_max}  ‚Üí  N√≠vel: {nivel.upper()}")
        print(f"   ‚Ä¢ Recomenda√ß√£o: {recomendacao}")

    return {
        "feature": feature_name,
        "acf_max": acf_max,
        "acf_lag_max": lag_max,
        "nivel": nivel,
        "recomendacao": recomendacao,
    }
